incarnation: protelis

variables:
  seed: &seed
    min: 0
    max: 1
    step: 1
    default: 0
  spacing: &spacing
    type: ArbitraryVariable
    parameters: [0.25, [0.25, 0.5]]
  error: &error
    type: ArbitraryVariable
    parameters: [0.1, [0.1, 0.2]]

seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [0.5]

_gradient: &gradient
  - time-distribution: 1
    # Writing Protelis programs within a YAML file is a bad experience
    # (some characters need escaping, no syntax highlight, no code suggestions...)
    # We recommend using the Protelis Eclipse plugin to write your code, then
    # Loading the code as a module within Alchemist
    # In order to run this example, make sure that src/main/protelis is part of
    # your classpath (the Gradle script is already properly configured).
    program: org:protelis:tutorial:distanceTo
  - program: send

deployments:
  type: Grid
  parameters: [-5, -5, 5, 5, *spacing, *spacing, *error, *error]
  contents:
    - in:
        type: Rectangle
        parameters: [-6, -6, 2, 2]
      molecule: source
      concentration: true
  programs: *gradient

export:
#  - type: MongoDBExporter
#    parameters:
#      uri: mongodb://localhost:27017
#      dbName: simulation
#    data:
#      - time
#      - molecule: "org:protelis:tutorial:distanceTo"
#        aggregators: [mean, min, max]
#        value-filter: onlyfinite
  - type: CSVExporter
    parameters:
      fileNameRoot: simulation
      interval: 1
      exportPath: data
    data:
      - time
      - molecule: "org:protelis:tutorial:distanceTo"
        aggregators: [mean, min, max]
        value-filter: onlyfinite

terminate:
  type: AfterTime
  parameters: 150
